/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.54
 * Generated at: 2017-08-25 08:13:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.report;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class report_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/common/taglibs.jsp", Long.valueOf(1329715404000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\n");
      out.write("\n");
      out.write("<script src=\"js/report/amcharts.js\" type=\"text/javascript\"></script>\n");
      out.write("<script src=\"js/report/raphael.js\" type=\"text/javascript\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"js/calendarDateInput.js\"></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("<h1>ZooKeepr集群状态趋势图 <font size=\"2\">机器IP:");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${server}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write(",统计日期：");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${statDate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("  <a href=\"zooKeeperStatus.do?method=showZooKeeperStatusPAGE&clusterId=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ clusterId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\">返回监控</a></font></h1>\n");
      out.write("<div style=\"width:50px;\">\n");
      out.write("<form>\n");
      out.write("\t<script>DateInput('orderdate', true, 'YYYY-MM-DD')</script>\n");
      out.write("\t<input id=\"server\" name=\"server\" type=\"hidden\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ server }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\" />\n");
      out.write("\t<input id=\"clusterId\" name=\"clusterId\" type=\"hidden\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ clusterId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\" />\n");
      out.write("\t<input type=\"button\" onClick=\"return showStat(this.form.orderdate.value);\" value=\"Show\">\n");
      out.write("</form>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("<!--\n");
      out.write("\tfunction showStat( statDate ){\n");
      out.write("\t\twindow.location = \"report.do?method=reportPAGE&clusterId=\"+ document.getElementById('clusterId').value +\"&server=\"+ document.getElementById('server').value +\"&statDate=\" + statDate;\n");
      out.write("\t}\n");
      out.write("//-->\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("<input id=\"contentOfReport\" name=\"contentOfReport\" type=\"hidden\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ contentOfReport }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\" />\n");
      out.write("\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("            var chartDataStr = document.getElementById(\"contentOfReport\").value;\n");
      out.write("            var chartData = eval('(' + chartDataStr + ')');\n");
      out.write("\n");
      out.write("            AmCharts.ready(function () {\n");
      out.write("                // generate some random data first\n");
      out.write("\n");
      out.write("                // SERIAL CHART    \n");
      out.write("                chart = new AmCharts.AmSerialChart();\n");
      out.write("                chart.pathToImages = \"../amcharts/images/\";\n");
      out.write("                chart.zoomOutButton = {\n");
      out.write("                    backgroundColor: '#000000',\n");
      out.write("                    backgroundAlpha: 0.15\n");
      out.write("                };\n");
      out.write("                chart.dataProvider = chartData;\n");
      out.write("                chart.categoryField = \"date\";\n");
      out.write("\n");
      out.write("                // listen for \"dataUpdated\" event (fired when chart is inited) and call zoomChart method when it happens\n");
      out.write("                chart.addListener(\"dataUpdated\", zoomChart);\n");
      out.write("\n");
      out.write("                // AXES\n");
      out.write("                // category                \n");
      out.write("                var categoryAxis = chart.categoryAxis;\n");
      out.write("                //categoryAxis.parseDates = true; // as our data is date-based, we set parseDates to true\n");
      out.write("                //categoryAxis.minPeriod = \"DDDDDD\"; // our data is daily, so we set minPeriod to DD\n");
      out.write("                categoryAxis.dashLength = 2;\n");
      out.write("                categoryAxis.gridAlpha = 0.15;\n");
      out.write("                categoryAxis.axisColor = \"#DADADA\";\n");
      out.write("\n");
      out.write("                // first value axis (on the left)\n");
      out.write("                var valueAxis1 = new AmCharts.ValueAxis();\n");
      out.write("                valueAxis1.axisColor = \"#FF6600\";\n");
      out.write("                valueAxis1.axisThickness = 2;\n");
      out.write("                valueAxis1.gridAlpha = 0;\n");
      out.write("                chart.addValueAxis(valueAxis1);\n");
      out.write("\n");
      out.write("                // second value axis (on the right) \n");
      out.write("                var valueAxis2 = new AmCharts.ValueAxis();\n");
      out.write("                valueAxis2.position = \"right\"; // this line makes the axis to appear on the right\n");
      out.write("                valueAxis2.axisColor = \"#FCD202\";\n");
      out.write("                valueAxis2.gridAlpha = 0;\n");
      out.write("                valueAxis2.axisThickness = 2;\n");
      out.write("                chart.addValueAxis(valueAxis2);\n");
      out.write("\n");
      out.write("                // third value axis (on the left, detached)\n");
      out.write("                valueAxis3 = new AmCharts.ValueAxis();\n");
      out.write("                valueAxis3.offset = 50; // this line makes the axis to appear detached from plot area\n");
      out.write("                valueAxis3.gridAlpha = 0;\n");
      out.write("                valueAxis3.axisColor = \"#B0DE09\";\n");
      out.write("                valueAxis3.axisThickness = 2;\n");
      out.write("                chart.addValueAxis(valueAxis3);\n");
      out.write("\n");
      out.write("                // GRAPHS\n");
      out.write("                // first graph\n");
      out.write("                var graph1 = new AmCharts.AmGraph();\n");
      out.write("                graph1.valueAxis = valueAxis1; // we have to indicate which value axis should be used\n");
      out.write("                graph1.title = \"订阅者数量\";\n");
      out.write("                graph1.valueField = \"watchers\";\n");
      out.write("                graph1.bullet = \"round\";\n");
      out.write("                graph1.hideBulletsCount = 30;\n");
      out.write("                chart.addGraph(graph1);\n");
      out.write("\n");
      out.write("                // second graph                \n");
      out.write("                var graph2 = new AmCharts.AmGraph();\n");
      out.write("                graph2.valueAxis = valueAxis2; // we have to indicate which value axis should be used\n");
      out.write("                graph2.title = \"客户端连接数\";\n");
      out.write("                graph2.valueField = \"conns\";\n");
      out.write("                graph2.bullet = \"square\";\n");
      out.write("                graph2.hideBulletsCount = 30;\n");
      out.write("                chart.addGraph(graph2);\n");
      out.write("\n");
      out.write("                // third graph\n");
      out.write("                var graph3 = new AmCharts.AmGraph();\n");
      out.write("                graph3.valueAxis = valueAxis3; // we have to indicate which value axis should be used\n");
      out.write("                graph3.valueField = \"znodes\";\n");
      out.write("                graph3.title = \"ZNode数量\";\n");
      out.write("                graph3.bullet = \"triangleUp\";\n");
      out.write("                graph3.hideBulletsCount = 30;\n");
      out.write("                chart.addGraph(graph3);\n");
      out.write("\n");
      out.write("                // CURSOR\n");
      out.write("                var chartCursor = new AmCharts.ChartCursor();\n");
      out.write("                chartCursor.cursorPosition = \"mouse\";\n");
      out.write("                chart.addChartCursor(chartCursor);\n");
      out.write("\n");
      out.write("                // SCROLLBAR\n");
      out.write("                var chartScrollbar = new AmCharts.ChartScrollbar();\n");
      out.write("                chart.addChartScrollbar(chartScrollbar);\n");
      out.write("\n");
      out.write("                // LEGEND\n");
      out.write("                var legend = new AmCharts.AmLegend();\n");
      out.write("                legend.marginLeft = 110;\n");
      out.write("                chart.addLegend(legend);\n");
      out.write("\n");
      out.write("                // WRITE\n");
      out.write("                chart.write(\"chartdiv\");\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            // this method is called when chart is first inited as we listen for \"dataUpdated\" event\n");
      out.write("            function zoomChart() {\n");
      out.write("                // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues\n");
      out.write("                chart.zoomToIndexes(10, 20);\n");
      out.write("            }\n");
      out.write("        </script>\n");
      out.write("\n");
      out.write("<div id=\"chartdiv\" style=\"width: 1000px; height: 500px;\"></div>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
